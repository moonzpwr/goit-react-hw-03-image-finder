{"version":3,"sources":["components/Searchbar/Searchbar.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Button/Button.jsx","components/Modal/Modal.jsx","services/imajeAPI.js","App.js","index.js"],"names":["SearchBar","state","inputValue","handleChange","e","setState","currentTarget","value","toLowerCase","handleSubmit","preventDefault","props","onSubmit","className","this","type","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","id","url","setlargeImg","largeUrl","src","alt","onClick","ImageGallery","images","map","image","webformatURL","largeImageURL","Button","Modal","handleCloseModal","code","onClose","window","addEventListener","removeEventListener","fetchImagesWithQuery","searchQuery","page","API_KEY","fetch","then","res","json","App","error","loading","largeImg","handlerSubmit","fetchImages","prevState","hits","catch","finally","onClickLoadMore","closeModal","prevProps","length","scrollTo","top","document","documentElement","scrollHeight","behavior","color","height","width","timeout","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cdc2721.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nexport default class SearchBar extends Component {\r\n    state = {\r\n        inputValue: ''\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({inputValue: e.currentTarget.value.toLowerCase()})\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (this.state.inputValue === \"\") { \r\n            return;\r\n        }\r\n        this.props.onSubmit(this.state.inputValue);\r\n        this.setState({ inputValue: '' });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n        <header className=\"Searchbar\">\r\n                <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n                <button type=\"submit\" className=\"SearchForm-button\">\r\n                    <span className=\"SearchForm-button-label\">Search</span>\r\n                </button>\r\n\r\n                <input\r\n                    className=\"SearchForm-input\"\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    autoFocus\r\n                    placeholder=\"Search images and photos\"\r\n                    value={this.state.inputValue}\r\n                    onChange={this.handleChange}\r\n                />\r\n        </form>\r\n        </header>\r\n    )   \r\n    }\r\n    \r\n}\r\n\r\n\r\n     SearchBar.propTypes = {\r\n        onSubmit: propTypes.func\r\n    } ","import propTypes from 'prop-types';\r\n\r\nexport default function ImageGalleryItem({ id, url, setlargeImg, largeUrl }) {\r\n    return (\r\n        <li className=\"ImageGalleryItem\">\r\n            <img src={url} alt=\"\" className=\"ImageGalleryItem-image\" onClick={() => {setlargeImg(largeUrl)} }/>\r\n        </li>\r\n    )\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n    id: propTypes.string,\r\n    url: propTypes.string,\r\n    largeUrl: propTypes.string,\r\n    setlargeImg: propTypes.func\r\n}","import propTypes from 'prop-types';\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\r\n\r\n\r\nexport default function ImageGallery({images, setlargeImg}) {\r\n    return (\r\n        <ul className=\"ImageGallery\">\r\n            {images.map(image => { return <ImageGalleryItem key={image.id} url={image.webformatURL} largeUrl={image.largeImageURL} setlargeImg={ setlargeImg}/>})}\r\n        </ul>\r\n    )\r\n           \r\n}\r\n\r\nImageGallery.propTypes = {\r\n    images: propTypes.array,\r\n    setlargeImg: propTypes.func\r\n}","import propTypes from 'prop-types';\r\n\r\nexport default function Button(props) { \r\n    return (\r\n        <button type='button' className=\"Button\" onClick={props.onClick}>Load more</button>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n   onClick: propTypes.func\r\n}","import { Component } from \"react\";\r\nimport propTypes from 'prop-types';\r\n\r\nexport default class Modal extends Component {\r\n    static propTypes = {\r\n        onClose: propTypes.func,\r\n        url: propTypes.string\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.handleCloseModal)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleCloseModal)\r\n    }\r\n\r\n    handleCloseModal = (e) => {\r\n        if (e.code === 'Escape') {\r\n                this.props.onClose();\r\n            }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <>\r\n            <div className=\"Overlay\">\r\n                <div className=\"Modal\">\r\n                    <img src={this.props.url} alt=\"\"/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n    }\r\n    \r\n}"," const fetchImagesWithQuery = (searchQuery, page = 1) => {\r\n    const API_KEY = '19208755-08629c8cbde4e66b67e21e936';\r\n    return fetch(`https://pixabay.com/api/?q=${searchQuery}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`)\r\n                .then(res => res.json())    \r\n}\r\n\r\nexport default fetchImagesWithQuery;","import { Component } from 'react';\n\nimport SearchBar from './components/Searchbar/Searchbar';\nimport ImageGallery from './components/ImageGallery/ImageGallery';\nimport Button from './components/Button/Button';\nimport Loader from 'react-loader-spinner';\nimport Modal from './components/Modal/Modal';\n\nimport './style.css';\nimport fetchImagesWithQuery from './services/imajeAPI';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\n\nclass App extends Component {\n  state = {\n    searchQuery: '',\n    images: [],\n    page: 1,\n    error: null,\n    loading: false,\n    largeImg: null\n}\n\n\n  handlerSubmit = (inputValue) => {\n    this.setState({ searchQuery: inputValue, page: 1, images: [] })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevQuery = prevState.searchQuery;\n    const nextQuery = this.state.searchQuery;\n    if (prevQuery !== nextQuery) {\n      this.fetchImages()\n    }\n\n    if (prevState.images.length < this.state.images.length) {\n      window.scrollTo({\n          top: document.documentElement.scrollHeight,\n          behavior: 'smooth',\n          })\n    }\n  }\n\n  fetchImages = () => {\n    const { searchQuery, page } = this.state;\n    this.setState({loading:true})\n    fetchImagesWithQuery(searchQuery, page)\n      .then(images => { this.setState(prevState => ({ images: [...prevState.images, ...images.hits], page: prevState.page + 1 })) })\n      .catch(error => { this.setState({ error }) })\n      .finally(() => { this.setState({ loading: false }) })\n  }\n\n  onClickLoadMore = () => {\n    this.fetchImages()\n\n    // setTimeout(() => {\n    //   window.scrollTo({\n    //       top: document.documentElement.scrollHeight,\n    //       behavior: 'smooth',\n    //       })\n    // }, 100)\n  }\n\n  closeModal = () => {\n\n    this.setState({ largeImg: null })\n  }\n\n  setlargeImg = (url) => {\n    this.setState({largeImg: url})\n  }\n\n\n  render() {\n    const { images, loading, largeImg} = this.state\n\n    return (\n        <>\n        <SearchBar onSubmit={this.handlerSubmit} />\n\n        \n        {images.length > 0 && <ImageGallery images={images} setlargeImg={this.setlargeImg }/>}\n        \n        {loading && <Loader\n        type='Bars'\n        color='#00BFFF'\n        height={50}\n        width={100}\n        timeout={30000} \n      />}        \n        \n        {images.length > 0 && !loading && <Button onClick={ this.onClickLoadMore}/>}\n        \n        {largeImg && <Modal onClose={this.closeModal} url={largeImg}/>}\n        </>\n      );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}